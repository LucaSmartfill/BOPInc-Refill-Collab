#include <Arduino.h>
#include <U8g2lib.h>
#include <SPI.h>
#include <Wire.h>

#define I2C_DEV_ADDR 0x56
#define Printing_width 128
#define Printing_height 64

static unsigned char Printing[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x80, 0xff, 0x7f, 0xff, 0xff, 0x00, 0xf8, 0xff, 0xff, 0xbc, 0x07,
    0x1e, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 0xf8,
    0xff, 0xff, 0xf6, 0x07, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0,
    0xc1, 0x06, 0x00, 0x30, 0x08, 0x86, 0xc3, 0xe1, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x80, 0x40, 0x04, 0x00, 0x30, 0x08, 0x84, 0xc3, 0xf1,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x80, 0x40, 0x04, 0x00, 0x20,
    0x08, 0x86, 0x87, 0x31, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x83,
    0x60, 0x0c, 0x00, 0x20, 0x08, 0x9f, 0x84, 0x19, 0x06, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xfc, 0x83, 0x60, 0x08, 0x00, 0x60, 0x88, 0xbd, 0xc4, 0x09,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x86, 0xe0, 0x39, 0x00, 0xc0,
    0x89, 0xe4, 0xf4, 0x49, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x84,
    0xe4, 0x33, 0x00, 0xc0, 0x8b, 0xc5, 0xbc, 0xe9, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x43, 0x84, 0x0c, 0x22, 0x00, 0xc0, 0x0e, 0xc7, 0x9e, 0xf9,
    0x84, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x43, 0x84, 0x08, 0x26, 0x00, 0x80,
    0x0c, 0x03, 0x86, 0x71, 0x84, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x87,
    0x08, 0x26, 0x00, 0xc0, 0x08, 0x00, 0x80, 0x21, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x5c, 0x87, 0x18, 0x26, 0x00, 0x60, 0x08, 0x00, 0x80, 0x01,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x87, 0x18, 0x26, 0x00, 0x70,
    0x08, 0x00, 0x80, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x80,
    0x10, 0x26, 0x00, 0x00, 0x08, 0x00, 0x80, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x60, 0x80, 0x30, 0x23, 0x00, 0x00, 0x08, 0x00, 0x80, 0x01,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x80, 0xe0, 0x23, 0x00, 0x00,
    0x08, 0x00, 0x80, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80,
    0xc0, 0x21, 0x00, 0x00, 0x08, 0x00, 0x80, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x80, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x80, 0x01,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x20, 0x00, 0x00,
    0x08, 0x00, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0xf0, 0x01,
    0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x40, 0x07, 0x00, 0x00, 0x00, 0x00,
    0xf8, 0x03, 0xf8, 0x07, 0x02, 0x00, 0x00, 0xfe, 0x01, 0x10, 0xc0, 0x0d,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x0c, 0x0e, 0x06, 0x00, 0x00, 0x83,
    0x03, 0x30, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0c, 0x04, 0x0c,
    0x7e, 0x00, 0x00, 0x01, 0x03, 0xf0, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x18, 0x04, 0x18, 0xfc, 0x00, 0x00, 0x01, 0x06, 0xe0, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x80, 0x01, 0x00, 0x01,
    0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00,
    0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x83, 0x03, 0x00, 0x1c, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xc0, 0xcf,
    0xf7, 0xff, 0x3f, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0x07, 0x80, 0x6f, 0xfe, 0xff, 0x3f, 0x00, 0xfe, 0xff, 0xff, 0xff,
    0x04, 0x60, 0x8c, 0x40, 0x0c, 0x00, 0x00, 0x33, 0x1c, 0x20, 0x00, 0x00,
    0x10, 0x60, 0x22, 0x00, 0x04, 0x60, 0x8c, 0x40, 0x0c, 0x00, 0x00, 0x73,
    0x18, 0x20, 0x00, 0x00, 0x30, 0x20, 0x66, 0x00, 0x04, 0x78, 0x8c, 0x41,
    0x0c, 0x00, 0x00, 0xd3, 0x18, 0x20, 0x00, 0x00, 0xf0, 0x30, 0x66, 0x00,
    0x04, 0x7e, 0x0c, 0x41, 0x0c, 0x00, 0x00, 0x83, 0x18, 0x3e, 0x00, 0x00,
    0xf8, 0x10, 0xfe, 0x0c, 0x04, 0x67, 0x0c, 0x43, 0x0c, 0x00, 0x00, 0x83,
    0x1c, 0x3b, 0x00, 0x00, 0x98, 0x11, 0xba, 0x1f, 0x84, 0x61, 0x0c, 0x4e,
    0x0c, 0x00, 0x00, 0x83, 0x1f, 0x21, 0x00, 0x00, 0x98, 0x11, 0x22, 0x1b,
    0x84, 0x60, 0x0c, 0x7e, 0xcc, 0x01, 0x00, 0xc3, 0x93, 0x27, 0x06, 0x00,
    0x00, 0x19, 0x22, 0x12, 0xc4, 0x60, 0x0c, 0x72, 0xcc, 0x01, 0x00, 0xc3,
    0x11, 0x27, 0x0e, 0x00, 0x80, 0x19, 0x22, 0x11, 0xc4, 0x61, 0x0c, 0x62,
    0xcc, 0x03, 0x00, 0x43, 0x10, 0x27, 0x1e, 0x00, 0x80, 0x19, 0xfe, 0x11,
    0x84, 0x67, 0x0c, 0x62, 0xcc, 0x03, 0x00, 0x03, 0x10, 0x20, 0x1e, 0x00,
    0xc0, 0x18, 0xdc, 0x11, 0x04, 0x6e, 0xcc, 0x43, 0x0c, 0x02, 0x00, 0x03,
    0x10, 0x20, 0x18, 0x00, 0xfc, 0x10, 0x00, 0x10, 0x04, 0x78, 0xcc, 0x41,
    0x0c, 0x02, 0x00, 0x03, 0x10, 0x20, 0x18, 0x00, 0x7c, 0x10, 0x00, 0x1e,
    0x04, 0x70, 0x0c, 0x40, 0x0c, 0x03, 0x00, 0x03, 0x10, 0x60, 0x18, 0x00,
    0x70, 0x10, 0x00, 0x0e, 0x84, 0x61, 0x0c, 0x40, 0x0c, 0x01, 0x00, 0x33,
    0x10, 0x60, 0x08, 0x00, 0xc0, 0x10, 0x00, 0x0c, 0x84, 0x63, 0x0c, 0x40,
    0x8c, 0x01, 0x00, 0x33, 0x1f, 0x60, 0x0c, 0x00, 0x80, 0x31, 0x00, 0x18,
    0x84, 0x63, 0x0c, 0x40, 0xd8, 0x00, 0x00, 0xe3, 0x1f, 0xc0, 0x06, 0x00,
    0x00, 0x61, 0x00, 0x30, 0x84, 0x61, 0x0c, 0x40, 0xf8, 0x00, 0x00, 0xc3,
    0x18, 0xc0, 0x03, 0x00, 0x00, 0xe3, 0x00, 0x60, 0x04, 0x00, 0x0c, 0x00,
    0x30, 0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0xe0, 0x00, 0x00,
    0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xc0, 0x00, 0x00};

#define Dispensing_width 96
#define Dispensing_height 32
static unsigned char Dispensing[] = {
    0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00,
    0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00,
    0x38, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x07, 0x00, 0x00,
    0x0c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x0e, 0x00, 0x00,
    0x0c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x18, 0x00, 0x00,
    0x0c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7c, 0xfe, 0xff, 0xff, 0xff, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xc7, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x0c, 0x60, 0x00, 0x0c, 0x10, 0x98, 0x83, 0x87, 0x01, 0x0c, 0x18, 0x1c,
    0x0c, 0x60, 0x00, 0x08, 0x10, 0x8c, 0x07, 0x87, 0x01, 0x0c, 0x18, 0x3e,
    0x0c, 0x60, 0x00, 0x18, 0x10, 0x8c, 0x0f, 0x86, 0xc1, 0x1f, 0x18, 0x36,
    0x0c, 0x60, 0x00, 0x18, 0x10, 0x0c, 0x0c, 0x86, 0xe1, 0x1f, 0x18, 0x32,
    0x0c, 0x60, 0x00, 0x30, 0x10, 0x06, 0x88, 0x87, 0x61, 0x3c, 0x18, 0x3e,
    0x0c, 0x60, 0x00, 0x60, 0x10, 0x06, 0xc8, 0x87, 0x21, 0x32, 0x18, 0x1e,
    0x0c, 0x61, 0x18, 0xe0, 0x13, 0x06, 0xfc, 0x86, 0x21, 0xe3, 0x1b, 0x08,
    0x0c, 0x63, 0x18, 0xe0, 0x1f, 0x06, 0x3c, 0x86, 0x61, 0xe3, 0x1f, 0x00,
    0x0c, 0x63, 0x3c, 0x40, 0x1c, 0x06, 0x1e, 0x86, 0xe1, 0x63, 0x1c, 0x00,
    0x0c, 0xc3, 0x3f, 0x60, 0x1c, 0x06, 0x06, 0x86, 0xc1, 0x61, 0x1c, 0x06,
    0x0c, 0xc2, 0x37, 0x60, 0x18, 0x06, 0x00, 0x86, 0x01, 0x60, 0x18, 0x0e,
    0x0c, 0x06, 0x21, 0x7c, 0x18, 0x06, 0x00, 0x86, 0x01, 0x3c, 0x18, 0x1e,
    0x0c, 0x06, 0x20, 0x3c, 0x10, 0x06, 0x00, 0x86, 0x01, 0x3c, 0x18, 0x38,
    0x0c, 0x0c, 0x20, 0x00, 0x10, 0x06, 0x00, 0x86, 0x01, 0x00, 0x18, 0x30,
    0x0c, 0x0c, 0x30, 0x00, 0x10, 0x06, 0x00, 0x86, 0x01, 0x00, 0x18, 0x70,
    0x0c, 0x18, 0x30, 0x00, 0x10, 0x04, 0x00, 0x86, 0x01, 0x00, 0x18, 0x60,
    0x0c, 0x38, 0x38, 0x00, 0x10, 0x0c, 0x00, 0x86, 0x01, 0x00, 0x18, 0x60,
    0x0c, 0xf0, 0x1f, 0x00, 0x10, 0x7c, 0x00, 0x86, 0x01, 0x00, 0x18, 0xc0,
    0x0c, 0xe0, 0x0f, 0x00, 0x10, 0x78, 0x00, 0x86, 0x01, 0x00, 0x18, 0xc0,
    0x0c, 0x00, 0x03, 0x00, 0x00, 0x70, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00};

#define PushBottle_width 128
#define PushBottle_height 64
static unsigned char PushBottle[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
   0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x60, 0x0f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x0f,
   0x00, 0x00, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
   0x00, 0x00, 0xf3, 0x0f, 0x00, 0x00, 0xc4, 0x3f, 0x00, 0x00, 0x02, 0x00,
   0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x40, 0x04, 0x60,
   0x00, 0x00, 0x02, 0x00, 0xe0, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x1f,
   0x00, 0xc0, 0xfd, 0xff, 0x7f, 0x00, 0xfe, 0x3f, 0xf8, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x3f, 0x80, 0xc7, 0xff, 0xff, 0xff, 0x7c, 0xfe, 0x7f,
   0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xc0, 0xdf, 0xff, 0xff,
   0xff, 0xff, 0xfe, 0x7f, 0x1c, 0x60, 0x4c, 0x30, 0x00, 0x30, 0x22, 0x00,
   0xe0, 0x58, 0x0c, 0x0e, 0x38, 0xce, 0x07, 0x1c, 0x0e, 0x78, 0x4c, 0xf8,
   0xf0, 0x3e, 0x22, 0x00, 0xe0, 0x78, 0x0c, 0x1f, 0x1c, 0xc7, 0x07, 0x1f,
   0x06, 0x7e, 0xcc, 0xfc, 0xf1, 0x3f, 0x22, 0x06, 0xe0, 0x7d, 0x8c, 0x3f,
   0x0c, 0xef, 0x87, 0x1f, 0x03, 0x7f, 0x8c, 0x7c, 0xb9, 0x3b, 0x22, 0x0e,
   0xe0, 0x6f, 0x8c, 0x37, 0x0c, 0x7b, 0xc7, 0x1b, 0x83, 0x47, 0x8c, 0x7c,
   0x1b, 0x33, 0x22, 0x0f, 0x00, 0x67, 0x8c, 0x63, 0x04, 0x78, 0xf6, 0x19,
   0x83, 0x43, 0x8c, 0x39, 0xdb, 0x32, 0x22, 0x0e, 0x80, 0x43, 0x0c, 0x71,
   0x06, 0x38, 0xf6, 0x18, 0x83, 0x47, 0x0c, 0x39, 0xfb, 0x31, 0x22, 0x0c,
   0x80, 0x43, 0x4c, 0x30, 0x06, 0x1c, 0xe6, 0x19, 0x03, 0x4f, 0x0c, 0x03,
   0xf3, 0x31, 0x22, 0x0c, 0x00, 0x41, 0xcc, 0x3f, 0x06, 0x08, 0xc6, 0x1b,
   0x03, 0x5c, 0x0c, 0x87, 0xf3, 0x30, 0x22, 0x0e, 0x00, 0x40, 0x8c, 0x1f,
   0x06, 0x00, 0x06, 0x1b, 0x03, 0x78, 0x0c, 0xde, 0x41, 0x30, 0x22, 0x07,
   0x00, 0x60, 0x8c, 0x0f, 0x04, 0x00, 0x06, 0x1e, 0x33, 0x70, 0x0c, 0xfc,
   0x01, 0x30, 0xe2, 0x07, 0x00, 0x60, 0x0c, 0x0f, 0xe4, 0x00, 0x86, 0x1d,
   0x7a, 0x60, 0x0c, 0xfc, 0x00, 0x30, 0xe2, 0x03, 0x00, 0x60, 0x0c, 0x1c,
   0xec, 0x00, 0x86, 0x19, 0x7e, 0x40, 0x0c, 0x30, 0x00, 0x30, 0xc2, 0x01,
   0x00, 0x60, 0x0c, 0x38, 0xf8, 0x00, 0x86, 0x19, 0x3c, 0x40, 0x0c, 0x00,
   0x00, 0x30, 0x02, 0x00, 0x00, 0x40, 0x0c, 0x60, 0x78, 0x00, 0x86, 0x11,
   0x18, 0x40, 0x08, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x40, 0x08, 0xc0,
   0x20, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x3c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
   0x30, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x19, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
   0xff, 0xff, 0xff, 0xc3, 0xff, 0x7f, 0x88, 0xff, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0x9d, 0xff,
   0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x60, 0x38, 0x06, 0x00,
   0xc0, 0xdc, 0xbf, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
   0x60, 0x1c, 0x06, 0x00, 0xf0, 0xd8, 0xb7, 0x00, 0x06, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x08, 0x63, 0x0c, 0x1e, 0x00, 0xfc, 0x98, 0xf3, 0x30,
   0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x6f, 0x0c, 0x7e, 0x00,
   0xfe, 0x18, 0xb8, 0xf8, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8,
   0x6f, 0x06, 0xf2, 0x00, 0xcf, 0x98, 0xbf, 0xfc, 0x06, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc8, 0x7b, 0x06, 0xe2, 0x00, 0xc7, 0x18, 0x9f, 0xbc,
   0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x73, 0x06, 0xc2, 0x00,
   0xcf, 0x18, 0x8f, 0x3c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8,
   0x73, 0x06, 0xc2, 0x00, 0xde, 0x18, 0x9e, 0x3c, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x88, 0x63, 0x06, 0xe2, 0x00, 0xd8, 0x18, 0xf8, 0x38,
   0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x60, 0x06, 0x72, 0x00,
   0xf0, 0x18, 0xe0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
   0x60, 0x64, 0x72, 0x00, 0xec, 0x18, 0xc0, 0x00, 0x06, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x08, 0x40, 0xf4, 0x3e, 0x00, 0xdc, 0x18, 0xc0, 0x00,
   0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0xfc, 0x1e, 0x00,
   0xdc, 0x18, 0xc0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
   0x40, 0x78, 0x0c, 0x00, 0x8c, 0x18, 0xf0, 0x00, 0x04, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x08, 0x40, 0x30, 0x00, 0x00, 0x80, 0x18, 0xf8, 0x00,
   0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x03,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };


#define PressGreen_width 128
#define PressGreen_height 64
static unsigned char PressGreen[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x20, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x7b, 0xff, 0x01,
   0x8e, 0xe3, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x9f, 0x7f, 0xff, 0x01, 0xce, 0xe7, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0xb3, 0xfc, 0x61, 0x00, 0xe7, 0x2c, 0x5c, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf1, 0x8c, 0x21, 0x00,
   0x63, 0x3c, 0x4e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xf3, 0x8c, 0x31, 0x80, 0xe1, 0x3c, 0x46, 0x7c, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0xfb, 0x04, 0x31, 0x80, 0xe1, 0x3e, 0x86, 0xfc,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x3c, 0x31, 0x80,
   0x81, 0x37, 0x83, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xce, 0x7c, 0x31, 0x80, 0x80, 0x23, 0x83, 0xbc, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x8e, 0x7c, 0x31, 0xc0, 0x80, 0x23, 0x83, 0xbd,
   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x38, 0x31, 0xc0,
   0xc0, 0x21, 0x03, 0x99, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x82, 0x00, 0x31, 0xc0, 0x80, 0x20, 0x03, 0x83, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x61, 0x80, 0x00, 0x20, 0x03, 0xc7,
   0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x61, 0x80,
   0x00, 0x20, 0x03, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0x00, 0x61, 0x80, 0x0c, 0x20, 0x3b, 0xfe, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x61, 0x80, 0x0f, 0x20, 0x3a, 0x7c,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x21, 0x00,
   0x0f, 0x30, 0x3e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x00, 0x31, 0x00, 0x0f, 0x20, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x19, 0x00, 0x06, 0x20, 0x18, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
   0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
   0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0xc0, 0x00, 0x04, 0x00,
   0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xff, 0xff, 0xff, 0xfd, 0x7f, 0xf8,
   0xff, 0x63, 0xfc, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0xf8, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xf0, 0xff, 0xfb, 0xfc, 0x7f, 0x3c, 0x06, 0x18, 0x1e,
   0x00, 0x38, 0x60, 0x17, 0x00, 0xf6, 0x18, 0x60, 0xe0, 0xf8, 0x05, 0x18,
   0x38, 0x04, 0x5c, 0x1e, 0x00, 0x1c, 0x70, 0x26, 0x1c, 0xe6, 0x11, 0xc0,
   0xc0, 0x9c, 0x07, 0x18, 0x60, 0x04, 0x5f, 0xf6, 0x01, 0x0c, 0x7c, 0x26,
   0x3e, 0xc4, 0x11, 0xc0, 0xc0, 0x9c, 0x07, 0x18, 0xe0, 0x85, 0x5f, 0xf3,
   0x03, 0x06, 0x7e, 0x26, 0x3e, 0x04, 0x13, 0xc0, 0xc3, 0xdc, 0xc7, 0x19,
   0xc0, 0xc7, 0x9b, 0xc3, 0x03, 0x06, 0x6f, 0x26, 0x6f, 0x04, 0x13, 0x40,
   0xc7, 0xf4, 0xc6, 0x1b, 0xe0, 0xe7, 0x99, 0x9a, 0x03, 0x86, 0x67, 0x46,
   0x4e, 0x04, 0x12, 0x40, 0xcf, 0xe0, 0xe4, 0x1f, 0xe4, 0xe6, 0x98, 0xbe,
   0x01, 0x86, 0x63, 0x46, 0x4e, 0x84, 0x13, 0x40, 0xce, 0x70, 0xe4, 0x1f,
   0x7c, 0xe4, 0x98, 0xbe, 0x01, 0x82, 0x63, 0xc6, 0x4e, 0xc4, 0x13, 0x40,
   0xcc, 0x30, 0xe4, 0x1d, 0x78, 0xc4, 0x99, 0xa1, 0x01, 0x02, 0x67, 0xc6,
   0x40, 0xc4, 0x17, 0x40, 0xcc, 0x30, 0xe4, 0x19, 0x38, 0x84, 0x9b, 0xa1,
   0x01, 0x02, 0x6e, 0x86, 0x61, 0xc4, 0x1f, 0x40, 0xcc, 0x00, 0xe4, 0x19,
   0x10, 0x04, 0x1e, 0xb3, 0x01, 0x06, 0x78, 0x86, 0x73, 0xc4, 0x1f, 0x40,
   0xc6, 0x00, 0x04, 0x18, 0x00, 0x04, 0x1c, 0xbf, 0x01, 0x36, 0x70, 0x06,
   0x7f, 0x84, 0x19, 0x40, 0xc7, 0x00, 0x04, 0x18, 0x00, 0x04, 0x1c, 0xbe,
   0x01, 0x76, 0x70, 0x06, 0x3f, 0x04, 0x18, 0xc0, 0xc7, 0x00, 0x04, 0x10,
   0x00, 0x04, 0x18, 0x9c, 0x01, 0x74, 0x60, 0x06, 0x1e, 0x04, 0x10, 0xc0,
   0xc3, 0x00, 0x04, 0x10, 0x00, 0x04, 0x18, 0x00, 0x01, 0x7c, 0x60, 0x06,
   0x00, 0x04, 0x10, 0x80, 0xc1, 0x00, 0x04, 0x10, 0x00, 0x04, 0x1f, 0x00,
   0x01, 0x38, 0x40, 0x06, 0x00, 0x04, 0x10, 0x00, 0xc0, 0x80, 0x07, 0x10,
   0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00,
   0x80, 0xc0, 0x07, 0x10, 0x00, 0x80, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x00,
   0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x80, 0x19, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x40, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };


#define RedCancel_width 128
#define RedCancel_height 64
static unsigned char RedCancel[] = {
   0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x80, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x01,
   0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0x0f, 0xff, 0xff, 0xff, 0x01, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x7f,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0x01, 0x00, 0xc0,
   0xff, 0xff, 0xff, 0x7f, 0x08, 0x9c, 0x01, 0x84, 0x7f, 0x06, 0x1c, 0x19,
   0x60, 0x00, 0x00, 0x80, 0xc7, 0x80, 0xe1, 0x01, 0x18, 0x98, 0x31, 0x85,
   0x71, 0x06, 0x38, 0x11, 0x60, 0x00, 0x00, 0x00, 0xc7, 0xc0, 0xe9, 0x01,
   0x38, 0x98, 0xf9, 0xc7, 0xc0, 0x06, 0x20, 0x11, 0x60, 0x00, 0x00, 0x00,
   0xc4, 0xe0, 0x69, 0x1f, 0x78, 0x98, 0xf9, 0xc7, 0xc0, 0x06, 0x70, 0x11,
   0x67, 0xc0, 0xff, 0x00, 0xfc, 0xf8, 0x29, 0x3f, 0xe8, 0x99, 0xdd, 0x46,
   0xe0, 0x06, 0x70, 0x11, 0x6f, 0xc0, 0xff, 0x01, 0xfc, 0xfc, 0x29, 0x3c,
   0xc8, 0x99, 0x8d, 0x44, 0x70, 0x06, 0x38, 0x91, 0x7f, 0xc0, 0xff, 0x01,
   0xfc, 0xbc, 0xa9, 0x3b, 0x88, 0x99, 0xed, 0x64, 0x78, 0x06, 0x1c, 0x91,
   0x7f, 0x00, 0x00, 0x80, 0xcc, 0x8e, 0xe9, 0x1b, 0x88, 0x99, 0x7d, 0x64,
   0x38, 0x06, 0x1c, 0x91, 0x77, 0x00, 0x00, 0x80, 0xcf, 0x9c, 0xc9, 0x1b,
   0x88, 0x99, 0x79, 0x64, 0x70, 0x06, 0x38, 0x91, 0x67, 0x00, 0x00, 0x80,
   0xc7, 0xbc, 0x99, 0x1e, 0x88, 0x99, 0x79, 0x64, 0xf0, 0x06, 0x78, 0x11,
   0x67, 0x00, 0x00, 0x00, 0xc7, 0xf0, 0x11, 0x1e, 0xc8, 0x99, 0x31, 0x64,
   0x80, 0x07, 0xe0, 0x11, 0x60, 0xc0, 0xff, 0x01, 0xc3, 0xe0, 0x31, 0x1b,
   0xc8, 0x98, 0x01, 0x44, 0x02, 0x07, 0xc0, 0x11, 0x60, 0xc0, 0xff, 0x01,
   0xc0, 0xc0, 0xf1, 0x0b, 0xf8, 0x98, 0x01, 0x44, 0x67, 0x07, 0x80, 0x11,
   0x40, 0xc0, 0xff, 0x00, 0xc0, 0x80, 0xe1, 0x1b, 0x78, 0x98, 0x01, 0xc4,
   0xe7, 0x06, 0x00, 0x11, 0x40, 0x00, 0x00, 0x00, 0xc0, 0x80, 0xc1, 0x19,
   0x30, 0x98, 0x01, 0x84, 0xe7, 0x06, 0x00, 0x11, 0x40, 0x00, 0x00, 0x00,
   0xc0, 0x80, 0x01, 0x10, 0x00, 0x18, 0x01, 0x84, 0x63, 0x04, 0x00, 0x11,
   0x40, 0x00, 0x00, 0x00, 0x80, 0xe0, 0x01, 0x10, 0x00, 0x10, 0x01, 0x00,
   0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x01, 0x10,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xd0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x67, 0xff,
   0x1f, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x0f,
   0x00, 0xe0, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00,
   0xfc, 0xff, 0xff, 0x1f, 0x00, 0x70, 0xfc, 0x7b, 0x06, 0x80, 0x03, 0x18,
   0x00, 0x02, 0x00, 0x00, 0x00, 0x64, 0x00, 0x02, 0x00, 0x30, 0xbc, 0xfb,
   0x06, 0xc0, 0x07, 0xdc, 0x00, 0x02, 0x00, 0x00, 0xb8, 0x45, 0xdc, 0x02,
   0x00, 0x38, 0x3c, 0xc3, 0x06, 0xe0, 0x0f, 0xff, 0x01, 0x02, 0x00, 0x00,
   0xf8, 0x47, 0xfc, 0x03, 0x00, 0x18, 0x7e, 0xc3, 0x07, 0xf0, 0x8f, 0xff,
   0x71, 0x02, 0xfe, 0x0f, 0xf8, 0x47, 0xfe, 0x03, 0x00, 0x18, 0x7e, 0xe3,
   0x07, 0x38, 0xc9, 0xfb, 0xf9, 0x02, 0xfe, 0x0f, 0xcc, 0x46, 0x66, 0x03,
   0x00, 0x08, 0x7e, 0x73, 0x06, 0x1c, 0xf9, 0x39, 0xf9, 0x02, 0xfe, 0x0f,
   0xac, 0x44, 0x56, 0x02, 0x00, 0x08, 0x7e, 0x73, 0x06, 0x1c, 0xdd, 0xf8,
   0xb9, 0x03, 0x00, 0x00, 0xfc, 0x44, 0x7a, 0x02, 0x00, 0x08, 0x24, 0x73,
   0x06, 0x38, 0xdd, 0xd9, 0x39, 0x03, 0x00, 0x00, 0x7c, 0x44, 0x3e, 0x02,
   0x00, 0x08, 0x00, 0xf3, 0x06, 0x78, 0x9f, 0x9b, 0x38, 0x03, 0x00, 0x00,
   0x78, 0x44, 0x3c, 0x02, 0x00, 0x08, 0x00, 0xe3, 0x06, 0x60, 0x0d, 0x1e,
   0x38, 0x02, 0xfc, 0x0f, 0x78, 0x44, 0x3c, 0x02, 0x00, 0x08, 0x00, 0x83,
   0x07, 0xc0, 0x0d, 0x1c, 0x00, 0x02, 0xfe, 0x0f, 0x20, 0x44, 0x18, 0x02,
   0x00, 0xd8, 0x00, 0x03, 0x07, 0x80, 0x01, 0x1d, 0x00, 0x02, 0xfe, 0x0f,
   0x00, 0x44, 0x00, 0x02, 0x00, 0xd8, 0x00, 0x03, 0x06, 0x80, 0x01, 0x1b,
   0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x02, 0x00, 0xf0, 0x00, 0x03,
   0x06, 0x00, 0x81, 0x1b, 0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x02,
   0x00, 0xf0, 0x00, 0x03, 0x04, 0x00, 0x01, 0x13, 0x00, 0x02, 0x00, 0x00,
   0x00, 0x44, 0x00, 0x02, 0x00, 0xe0, 0x00, 0x02, 0x04, 0x00, 0x01, 0x10,
   0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };


int TakkaColonHeight = 32;
int TakkaColonWidth = 64;
// int TakkaColon[2048]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#define div_width 16
#define div_height 32
static unsigned char div_bits[] = {
    0x00, 0xe0, 0x00, 0xf0, 0x00, 0x70, 0x00, 0x78, 0x00, 0x38, 0x00, 0x38,
    0x00, 0x3c, 0x00, 0x1c, 0x00, 0x1e, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x0f,
    0x00, 0x07, 0x80, 0x07, 0x80, 0x03, 0xc0, 0x03, 0xc0, 0x01, 0xc0, 0x01,
    0xe0, 0x01, 0xe0, 0x00, 0xf0, 0x00, 0x70, 0x00, 0x70, 0x00, 0x78, 0x00,
    0x38, 0x00, 0x3c, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x1e, 0x00, 0x0e, 0x00,
    0x0f, 0x00, 0x07, 0x00};

// Numerials
#define Zero_16_width 16
#define Zero_16_height 32
static unsigned char Zero_16[] = {
   0xe0, 0x07, 0xe0, 0x07, 0xf8, 0x0f, 0xf8, 0x1f, 0xfc, 0x3f, 0xfc, 0x3f,
   0x7e, 0x38, 0x3e, 0x70, 0x3e, 0x70, 0x1f, 0x70, 0x1f, 0x60, 0x0f, 0xe0,
   0x0f, 0xe0, 0x0f, 0xe0, 0x0f, 0xe0, 0x07, 0xe0, 0x07, 0xf0, 0x07, 0xf0,
   0x07, 0xf0, 0x07, 0xf0, 0x07, 0xf8, 0x06, 0x78, 0x06, 0x7c, 0x0e, 0x7c,
   0x0e, 0x7f, 0x9c, 0x3f, 0xfc, 0x3f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf0, 0x0f,
   0xe0, 0x07, 0xe0, 0x03 };


#define Zero_32_width 32
#define Zero_32_height 32
static unsigned char Zero_32[] = {
   0x00, 0xf0, 0x0f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x80, 0xff, 0xff, 0x01,
   0xc0, 0xff, 0xff, 0x03, 0xf0, 0xff, 0xff, 0x07, 0xf8, 0xff, 0xff, 0x0f,
   0xf8, 0x3f, 0x80, 0x1f, 0xfc, 0x1f, 0x00, 0x1f, 0xfe, 0x07, 0x00, 0x3f,
   0xfe, 0x03, 0x00, 0x3e, 0xfe, 0x01, 0x00, 0x7e, 0xff, 0x01, 0x00, 0x7c,
   0xff, 0x00, 0x00, 0x7c, 0x7f, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0xfe,
   0x7f, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xff,
   0x3f, 0x00, 0x00, 0xff, 0x3e, 0x00, 0x80, 0x7f, 0x3e, 0x00, 0xc0, 0x7f,
   0x3e, 0x00, 0xe0, 0x7f, 0x7c, 0x00, 0xf0, 0x3f, 0xfc, 0x00, 0xf8, 0x3f,
   0xf8, 0x01, 0xfe, 0x1f, 0xf8, 0x87, 0xff, 0x0f, 0xf0, 0xff, 0xff, 0x0f,
   0xe0, 0xff, 0xff, 0x03, 0xc0, 0xff, 0xff, 0x01, 0x00, 0xff, 0xff, 0x00,
   0x00, 0xfc, 0x3f, 0x00, 0x00, 0xe0, 0x03, 0x00 };


#define One_16_width 16
#define One_16_height 32
static unsigned char One_16[] = {
   0x3c, 0x00, 0x3e, 0x00, 0x7e, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7e, 0x00,
   0xfe, 0x00, 0xfc, 0x01, 0xf8, 0x03, 0xf8, 0x03, 0xe0, 0x07, 0xe0, 0x0f,
   0x80, 0x1f, 0x80, 0x1f, 0x00, 0x3f, 0x00, 0x3e, 0x00, 0x7c, 0x00, 0x78,
   0x00, 0xf8, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0xf8, 0xf3, 0xfc, 0xff,
   0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0x3f, 0xff, 0x3f, 0xff, 0x0f, 0xfe, 0x0f,
   0xfc, 0x03, 0xfc, 0x01 };


#define One_32_width 32
#define One_32_height 32
static unsigned char One_32[] = {
   0xe0, 0x07, 0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00,
   0xfe, 0x3f, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00,
   0xfc, 0xff, 0x00, 0x00, 0xf8, 0xff, 0x01, 0x00, 0xe0, 0xff, 0x07, 0x00,
   0x80, 0xff, 0x1f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x00,
   0x00, 0xe0, 0xff, 0x01, 0x00, 0x80, 0xff, 0x07, 0x00, 0x00, 0xff, 0x0f,
   0x00, 0x00, 0xfc, 0x1f, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0xe0, 0x3f,
   0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xff,
   0x00, 0x00, 0x00, 0xff, 0x80, 0xff, 0x87, 0x7f, 0xf0, 0xff, 0xff, 0x7f,
   0xfc, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0x1f,
   0xff, 0xff, 0xff, 0x07, 0xfe, 0xff, 0xff, 0x01, 0xfc, 0xff, 0x7f, 0x00,
   0xf8, 0xff, 0x0f, 0x00, 0xc0, 0xff, 0x00, 0x00 };


#define Two_16_width 16
#define Two_16_height 32
static unsigned char Two_16[] = {
   0x30, 0x00, 0x78, 0x00, 0x78, 0x00, 0xf8, 0x00, 0xf8, 0x01, 0xf8, 0x03,
   0xe0, 0x07, 0xc0, 0x0f, 0x00, 0x0f, 0x00, 0x0e, 0x00, 0x1e, 0x00, 0x1c,
   0x01, 0x1c, 0x03, 0x1c, 0x0e, 0x0c, 0x3e, 0x0f, 0xfe, 0x0f, 0xfe, 0x07,
   0xfe, 0x03, 0xfc, 0x01, 0xf8, 0x01, 0xe0, 0x03, 0x80, 0x07, 0x00, 0x0f,
   0x00, 0x1c, 0x00, 0x38, 0x00, 0x70, 0x00, 0x60, 0x00, 0x60, 0x00, 0xc0,
   0x00, 0x80, 0x00, 0x00 };


#define Two_32_width 32
#define Two_32_height 32
static unsigned char Two_32[] = {
   0x00, 0x0f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xe0, 0x3f, 0x00, 0x00,
   0xe0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0x80, 0xff, 0x0f, 0x00,
   0x00, 0xfe, 0x3f, 0x00, 0x00, 0xf0, 0x7f, 0x00, 0x00, 0x80, 0xff, 0x00,
   0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf0, 0x01,
   0x07, 0x00, 0xe0, 0x01, 0x1e, 0x00, 0xe0, 0x01, 0xfe, 0x00, 0xf0, 0x01,
   0xfc, 0x0f, 0xfe, 0x00, 0xfc, 0xff, 0xff, 0x00, 0xf8, 0xff, 0x3f, 0x00,
   0xf8, 0xff, 0x0f, 0x00, 0xf8, 0xff, 0x03, 0x00, 0x80, 0xff, 0x07, 0x00,
   0x00, 0xf8, 0x1f, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0xfe, 0x01,
   0x00, 0x00, 0xf8, 0x03, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x80, 0x3f,
   0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x70,
   0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00 };


#define Three_16_width 16
#define Three_16_height 32
static unsigned char Three_16[] = {
   0x80, 0x07, 0x80, 0x0f, 0xc0, 0x1f, 0xc0, 0x1f, 0xe0, 0x3f, 0xe1, 0x3f,
   0xe3, 0x7f, 0xe3, 0x7f, 0xe3, 0x77, 0xe3, 0x67, 0xe6, 0x67, 0xe6, 0xe7,
   0xc6, 0xe7, 0xc6, 0xc3, 0x86, 0xc3, 0x0e, 0xc0, 0x0c, 0xc0, 0x0c, 0xc0,
   0x1c, 0xe0, 0x1c, 0xe0, 0x18, 0xe0, 0x38, 0xe0, 0x38, 0x70, 0x78, 0x78,
   0xf0, 0x7f, 0xf0, 0x7f, 0xe0, 0x3f, 0xe0, 0x3f, 0xc0, 0x3f, 0xc0, 0x1f,
   0x80, 0x0f, 0x00, 0x0f };


#define Three_32_width 32
#define Three_32_height 32
static unsigned char Three_32[] = {
   0x00, 0x00, 0x1f, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x00, 0xf0, 0xff, 0x01,
   0x00, 0xf8, 0xff, 0x03, 0x01, 0xf8, 0xff, 0x07, 0x07, 0xfc, 0xff, 0x0f,
   0x0f, 0xfc, 0xff, 0x1f, 0x0f, 0xfc, 0xbf, 0x3f, 0x1e, 0xfc, 0x7f, 0x3e,
   0x1e, 0xfc, 0x7f, 0x7c, 0x1e, 0xfc, 0x3f, 0x7c, 0x1e, 0xf8, 0x3f, 0x78,
   0x3c, 0xf8, 0x3f, 0x78, 0x3c, 0xf0, 0x1f, 0xf8, 0x7c, 0xe0, 0x0f, 0xf8,
   0x78, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0xf8, 0xf0, 0x00, 0x00, 0xf8,
   0xf0, 0x01, 0x00, 0xf8, 0xe0, 0x03, 0x00, 0xf8, 0xe0, 0x07, 0x00, 0x7c,
   0xc0, 0x0f, 0x00, 0x7e, 0xc0, 0x1f, 0x00, 0x7f, 0x80, 0x3f, 0xc0, 0x7f,
   0x00, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0x3f, 0x00, 0xfe, 0xff, 0x1f,
   0x00, 0xfc, 0xff, 0x0f, 0x00, 0xf8, 0xff, 0x07, 0x00, 0xf0, 0xff, 0x03,
   0x00, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x3e, 0x00 };


#define Four_16_width 16
#define Four_16_height 32
static unsigned char Four_16[] = {
   0x80, 0x07, 0xe0, 0x0f, 0xf0, 0x1f, 0xf8, 0x3f, 0x3c, 0x7c, 0x1c, 0x78,
   0x1e, 0x70, 0x0e, 0x70, 0x1e, 0x70, 0x1e, 0x70, 0x1e, 0x78, 0x3e, 0x3c,
   0xfe, 0x3e, 0xfe, 0x1f, 0xfc, 0x1f, 0xf8, 0x1f, 0xf8, 0x3f, 0xf8, 0x7f,
   0x7c, 0x7f, 0x3e, 0x7c, 0x1e, 0xf8, 0x1f, 0xf8, 0x0f, 0xf0, 0x0f, 0xf0,
   0x0f, 0xf0, 0x0f, 0xf0, 0x1e, 0x78, 0x3e, 0x7c, 0xfc, 0x3f, 0xfc, 0x1f,
   0xf8, 0x0f, 0xe0, 0x03 };


#define Four_32_width 32
#define Four_32_height 32
static unsigned char Four_32[] = {
   0x00, 0xc0, 0x1f, 0x00, 0x00, 0xfc, 0xff, 0x01, 0x80, 0xff, 0xff, 0x07,
   0xe0, 0xff, 0xff, 0x0f, 0xf0, 0x0f, 0xe0, 0x1f, 0xf8, 0x03, 0xc0, 0x3f,
   0xfc, 0x01, 0x80, 0x3f, 0xfc, 0x01, 0x00, 0x3f, 0xfc, 0x01, 0x00, 0x3f,
   0xfe, 0x03, 0x80, 0x3f, 0xfe, 0x07, 0xc0, 0x1f, 0xfc, 0x1f, 0xf0, 0x1f,
   0xfc, 0x7f, 0xfc, 0x0f, 0xf8, 0xff, 0xff, 0x03, 0xf0, 0xff, 0xff, 0x01,
   0xe0, 0xff, 0xff, 0x07, 0x80, 0xff, 0xff, 0x0f, 0xe0, 0xff, 0xff, 0x3f,
   0xf8, 0x7f, 0xfe, 0x3f, 0xfc, 0x1f, 0xf8, 0x7f, 0xfe, 0x07, 0xe0, 0x7f,
   0xfe, 0x03, 0x80, 0xff, 0xff, 0x01, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff,
   0xff, 0x00, 0x00, 0xff, 0xff, 0x01, 0x80, 0x7f, 0xfe, 0x03, 0xc0, 0x7f,
   0xfc, 0x1f, 0xf8, 0x3f, 0xf8, 0xff, 0xff, 0x0f, 0xe0, 0xff, 0xff, 0x03,
   0x80, 0xff, 0xff, 0x00, 0x00, 0xfc, 0x0f, 0x00 };


#define Five_16_width 16
#define Five_16_height 32
static unsigned char Five_16[] = {
   0x80, 0x01, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x03, 0xf0, 0x03, 0xf8, 0x03,
   0xf8, 0x03, 0x3c, 0x07, 0x3c, 0x0f, 0x1c, 0x1f, 0x1e, 0x7e, 0x0e, 0x7e,
   0x0e, 0x3f, 0x0e, 0x0f, 0x87, 0x07, 0x87, 0x07, 0x87, 0x03, 0xc7, 0x03,
   0xc7, 0x01, 0xc7, 0x01, 0xc7, 0x01, 0xc7, 0x01, 0xc7, 0x01, 0xc6, 0x01,
   0xce, 0x01, 0xce, 0x01, 0x9c, 0x01, 0xbc, 0x03, 0xf8, 0x07, 0xf0, 0x0f,
   0xe0, 0x0f, 0xc0, 0x07 };


#define Five_32_width 32
#define Five_32_height 32
static unsigned char Five_32[] = {
   0x00, 0x80, 0x07, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0xf8, 0x3f, 0x00,
   0x00, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x80, 0xff, 0x0f, 0x00,
   0xc0, 0xbf, 0x0f, 0x00, 0xe0, 0x9f, 0x7f, 0x00, 0xf0, 0x07, 0xff, 0x01,
   0xf8, 0x03, 0xff, 0x07, 0xfc, 0x01, 0xfe, 0x3f, 0xfc, 0x00, 0xfc, 0x7f,
   0xfe, 0x00, 0xfe, 0x07, 0x7e, 0x00, 0xff, 0x01, 0x7e, 0x80, 0x7f, 0x00,
   0x3e, 0xc0, 0x3f, 0x00, 0x3f, 0xe0, 0x0f, 0x00, 0x3f, 0xe0, 0x07, 0x00,
   0x3f, 0xe0, 0x07, 0x00, 0x3f, 0xf0, 0x03, 0x00, 0x3f, 0xf0, 0x03, 0x00,
   0x3e, 0xf0, 0x01, 0x00, 0x3e, 0xf0, 0x01, 0x00, 0x7e, 0xf0, 0x01, 0x00,
   0xfc, 0xf0, 0x03, 0x00, 0xf8, 0xe1, 0x03, 0x00, 0xf8, 0xe3, 0x07, 0x00,
   0xf0, 0xcf, 0x0f, 0x00, 0xc0, 0xff, 0x1f, 0x00, 0x80, 0xff, 0xff, 0x00,
   0x00, 0xfc, 0xff, 0x01, 0x00, 0xe0, 0x3f, 0x00 };


#define Six_16_width 16
#define Six_16_height 32
static unsigned char Six_16[] = {
   0x60, 0x00, 0x70, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00,
   0xe0, 0x00, 0xe3, 0x00, 0xe3, 0x10, 0xe3, 0x30, 0xe3, 0x30, 0xe2, 0x78,
   0xe2, 0x78, 0xc6, 0x7c, 0xc6, 0xfc, 0xc6, 0xff, 0xc6, 0xdf, 0x8c, 0xdf,
   0x8c, 0xcf, 0x0c, 0xc0, 0x1c, 0xc0, 0x1c, 0xc0, 0x38, 0xe0, 0x38, 0xe0,
   0x78, 0x70, 0xf0, 0x79, 0xf0, 0x7f, 0xe0, 0x7f, 0xe0, 0x3f, 0xc0, 0x3f,
   0x80, 0x1f, 0x00, 0x0f };

#define Six_32_width 32
#define Six_32_height 32
static unsigned char Six_32[] = {
   0x00, 0x1e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x00,
   0x80, 0xff, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
   0x00, 0xfe, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x0e, 0xfc, 0x00, 0x03,
   0x0e, 0xf8, 0x00, 0x0f, 0x0e, 0xf8, 0x80, 0x1f, 0x1e, 0xf8, 0xc0, 0x1f,
   0x1e, 0xf8, 0xc0, 0x3f, 0x1c, 0xf8, 0xe0, 0x7f, 0x3c, 0xf8, 0xf8, 0x7f,
   0x3c, 0xf0, 0xff, 0x7f, 0x78, 0xf0, 0xff, 0xfb, 0x78, 0xe0, 0xff, 0xf1,
   0xf0, 0x80, 0xff, 0xf0, 0xf0, 0x01, 0x00, 0xf0, 0xf0, 0x03, 0x00, 0xf0,
   0xe0, 0x03, 0x00, 0xf8, 0xc0, 0x07, 0x00, 0x78, 0xc0, 0x0f, 0x00, 0x7c,
   0x80, 0x3f, 0x00, 0x7f, 0x00, 0xff, 0xe1, 0x3f, 0x00, 0xfe, 0xff, 0x3f,
   0x00, 0xfc, 0xff, 0x1f, 0x00, 0xf8, 0xff, 0x0f, 0x00, 0xf0, 0xff, 0x07,
   0x00, 0xc0, 0xff, 0x03, 0x00, 0x00, 0x7f, 0x00 };


#define Seven_16_width 16
#define Seven_16_height 32
static unsigned char Seven_16[] = {
   0xe0, 0x00, 0xf0, 0x03, 0xf8, 0x07, 0xfc, 0x0f, 0x7e, 0x0f, 0x3e, 0x1e,
   0x1e, 0x1e, 0x0f, 0x3c, 0x0f, 0x3c, 0x0f, 0x3c, 0x0f, 0x38, 0x0f, 0x38,
   0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfc, 0x3f, 0xf8, 0x3f, 0x00, 0x3c,
   0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38,
   0x00, 0x38, 0x00, 0x78, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf8,
   0x00, 0xf0, 0x00, 0x70 };


#define Seven_32_width 32
#define Seven_32_height 32
static unsigned char Seven_32[] = {
   0x00, 0xf8, 0x01, 0x00, 0x00, 0xff, 0x0f, 0x00, 0xc0, 0xff, 0x3f, 0x00,
   0xf0, 0xff, 0x7f, 0x00, 0xf8, 0x3f, 0xff, 0x01, 0xfc, 0x0f, 0xfc, 0x03,
   0xfe, 0x03, 0xf8, 0x07, 0xfe, 0x01, 0xf0, 0x07, 0xff, 0x00, 0xf0, 0x0f,
   0x7f, 0x00, 0xe0, 0x0f, 0x7f, 0x00, 0xe0, 0x0f, 0x7e, 0x00, 0xc0, 0x0f,
   0xfe, 0xff, 0xff, 0x0f, 0xfc, 0xff, 0xff, 0x0f, 0xf8, 0xff, 0xff, 0x0f,
   0xf0, 0xff, 0xff, 0x0f, 0xc0, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0x0f,
   0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f,
   0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x0f,
   0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x7f,
   0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xc0, 0xff,
   0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x3e };


#define Eight_16_width 16
#define Eight_16_height 32
static unsigned char Eight_16[] = {
   0x06, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00,
   0x0e, 0x00, 0x0c, 0x00, 0x0c, 0x80, 0x0c, 0x80, 0xcc, 0xf0, 0xfc, 0xf9,
   0xfc, 0xff, 0xfc, 0xff, 0xfc, 0x7f, 0x3c, 0x3f, 0x1c, 0x07, 0x0c, 0x06,
   0x0c, 0x07, 0x0c, 0x0f, 0x0c, 0x0f, 0x0c, 0x07, 0x0c, 0x07, 0x8c, 0x07,
   0x8c, 0x07, 0xcc, 0x07, 0xcc, 0x03, 0xfc, 0x03, 0xf8, 0x01, 0xf8, 0x00,
   0xf0, 0x00, 0x30, 0x00 };


#define Eight_32_width 32
#define Eight_32_height 32
static unsigned char Eight_32[] = {
   0x1c, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
   0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00,
   0xfe, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x40,
   0xf0, 0x01, 0x00, 0xe0, 0xf0, 0xf1, 0x00, 0xff, 0xf0, 0xfd, 0xe3, 0xff,
   0xf0, 0xff, 0xe7, 0xff, 0xf0, 0xff, 0xff, 0x7f, 0xf0, 0xff, 0xff, 0x3f,
   0xf0, 0x87, 0xff, 0x0f, 0xf0, 0x01, 0x3e, 0x00, 0xf0, 0x01, 0x7e, 0x00,
   0xf0, 0x01, 0x7e, 0x00, 0xf0, 0x01, 0x7e, 0x00, 0xf0, 0x01, 0x7e, 0x00,
   0xf0, 0x01, 0x7f, 0x00, 0xf0, 0x81, 0x7f, 0x00, 0xf0, 0x81, 0x3f, 0x00,
   0xf0, 0xc1, 0x3f, 0x00, 0xf0, 0xe1, 0x1f, 0x00, 0xf0, 0xf9, 0x0f, 0x00,
   0xe0, 0xff, 0x07, 0x00, 0xe0, 0xff, 0x03, 0x00, 0xc0, 0xff, 0x01, 0x00,
   0x80, 0x7f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00 };


#define Nine_16_width 16
#define Nine_16_height 32
static unsigned char Nine_16[] = {
   0x06, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00,
   0x1f, 0x00, 0x7e, 0x00, 0xfe, 0x01, 0xfc, 0x07, 0xf8, 0x0f, 0xf0, 0x1f,
   0xe0, 0x3f, 0xc0, 0x3f, 0x00, 0x7f, 0x60, 0x7c, 0xf0, 0x79, 0xf8, 0x71,
   0xfc, 0xe3, 0x9c, 0xe3, 0x8e, 0xe7, 0x0e, 0xe7, 0x0e, 0xe7, 0x0e, 0xf7,
   0x0e, 0x7f, 0x1e, 0x7f, 0x3e, 0x3f, 0x3e, 0x3f, 0x3e, 0x1f, 0x3c, 0x0f,
   0x3c, 0x07, 0x18, 0x03 };


#define Nine_32_width 32
#define Nine_32_height 32
static unsigned char Nine_32[] = {
   0x7c, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00,
   0xff, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
   0xfe, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0xff, 0x03, 0x00,
   0xf0, 0xff, 0x3f, 0x00, 0xe0, 0xff, 0xff, 0x00, 0x80, 0xff, 0xff, 0x03,
   0x00, 0xfc, 0xff, 0x07, 0x00, 0xe0, 0xff, 0x0f, 0x00, 0x00, 0xff, 0x1f,
   0x00, 0x3c, 0xf8, 0x3f, 0x80, 0xff, 0xc1, 0x7f, 0xc0, 0xff, 0x07, 0x7f,
   0xf0, 0xff, 0x0f, 0x7e, 0xf0, 0xe1, 0x1f, 0xfc, 0xf8, 0x81, 0x3f, 0xfc,
   0xfc, 0x00, 0x3f, 0xfc, 0x7c, 0x00, 0x3f, 0xfc, 0x7c, 0x00, 0x7e, 0x7e,
   0x7c, 0x00, 0x7e, 0x7f, 0xfc, 0x07, 0xfe, 0x3f, 0xfc, 0x0f, 0xfe, 0x1f,
   0xfc, 0x0f, 0xfe, 0x0f, 0xf8, 0x0f, 0xff, 0x03, 0xf8, 0x0f, 0xff, 0x01,
   0xf0, 0x0f, 0x3f, 0x00, 0x80, 0x03, 0x07, 0x00 };


#define Takka_width 48
#define Takka_height 32
static unsigned char Takka_bits[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00,
    0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xf9, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x0c, 0x00, 0x0f, 0xc0, 0x00, 0x3c, 0x0c, 0x00, 0x06, 0x80, 0x00, 0x18,
    0x0c, 0x00, 0x06, 0xc0, 0x00, 0x18, 0x0c, 0x00, 0x06, 0xf0, 0x07, 0x18,
    0x0c, 0x00, 0x06, 0xfc, 0x0f, 0x18, 0x0c, 0x00, 0x06, 0xce, 0x1c, 0x18,
    0x0c, 0x00, 0x06, 0x87, 0x38, 0x18, 0x0c, 0x02, 0x86, 0x83, 0x30, 0x18,
    0x8c, 0x0f, 0x86, 0x81, 0x30, 0x18, 0x8c, 0x0f, 0x86, 0x81, 0x20, 0x18,
    0x8c, 0x1f, 0xc6, 0x87, 0x3c, 0x18, 0x0c, 0x1b, 0x06, 0x8f, 0x3c, 0x18,
    0x0c, 0x18, 0x06, 0xdc, 0x3c, 0x18, 0x0c, 0x18, 0x06, 0xf0, 0x1c, 0x18,
    0x0c, 0x18, 0x06, 0xe0, 0x00, 0x18, 0x0c, 0x0c, 0x06, 0xe0, 0x00, 0x18,
    0x0c, 0x0c, 0x06, 0xc0, 0x00, 0x18, 0x18, 0x06, 0x06, 0xc0, 0x00, 0x18,
    0xb8, 0x07, 0x06, 0x80, 0x00, 0x18, 0xf0, 0x03, 0x06, 0x80, 0x00, 0x18,
    0xe0, 0x00, 0x06, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x00, 0x00, 0x18};

#define takkaColon_width 64
#define takkaColon_height 32
static unsigned char takkaColon[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0x03,
    0x00, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xf7, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x18, 0x00, 0x78, 0x00,
    0x30, 0x00, 0x1e, 0x30, 0x18, 0x00, 0x70, 0x00, 0x30, 0x00, 0x1c, 0x7c,
    0x18, 0x00, 0x70, 0x00, 0x30, 0x00, 0x18, 0xfc, 0x18, 0x00, 0x70, 0x00,
    0xff, 0x01, 0x18, 0xce, 0x18, 0x00, 0x70, 0xc0, 0xff, 0x07, 0x18, 0xce,
    0x18, 0x00, 0x70, 0xe0, 0x31, 0x0f, 0x18, 0xfc, 0x18, 0x00, 0x70, 0x70,
    0x30, 0x0c, 0x18, 0x7c, 0x18, 0x0c, 0x70, 0x38, 0x30, 0x1c, 0x18, 0x30,
    0x18, 0x3e, 0x70, 0x18, 0x30, 0x18, 0x18, 0x00, 0x18, 0x3f, 0x70, 0x3c,
    0x30, 0x18, 0x18, 0x00, 0x18, 0x7f, 0x70, 0xfc, 0x30, 0x1f, 0x18, 0x00,
    0x18, 0x66, 0x70, 0xf0, 0x31, 0x1f, 0x18, 0x10, 0x18, 0x60, 0x70, 0x80,
    0x37, 0x0f, 0x18, 0x7c, 0x18, 0x60, 0x70, 0x00, 0x3f, 0x07, 0x18, 0xfc,
    0x18, 0x60, 0x70, 0x00, 0x3e, 0x00, 0x18, 0xce, 0x18, 0x30, 0x70, 0x00,
    0x3c, 0x00, 0x18, 0xce, 0x18, 0x38, 0x70, 0x00, 0x38, 0x00, 0x18, 0xfc,
    0x38, 0x1c, 0x70, 0x00, 0x30, 0x00, 0x18, 0x7c, 0x70, 0x0f, 0x70, 0x00,
    0x30, 0x00, 0x18, 0x30, 0xf0, 0x07, 0x70, 0x00, 0x30, 0x00, 0x18, 0x00,
    0xc0, 0x01, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00,
    0x00, 0x00, 0x18, 0x00};



#define PressAnyButton_width 128
#define PressAnyButton_height 64
static unsigned char PushAnyBtn[] = {
   0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
   0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0xf6, 0xff, 0xf0, 0xdf,
   0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff,
   0xf7, 0xff, 0xf1, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00,
   0x00, 0xe0, 0xc7, 0xcc, 0x3f, 0x20, 0x40, 0x60, 0x80, 0x01, 0x60, 0x00,
   0xe3, 0x01, 0x00, 0x00, 0x00, 0x30, 0xcf, 0x8c, 0x3b, 0x20, 0xc0, 0x60,
   0x4c, 0x01, 0xf0, 0x80, 0x63, 0xe2, 0x00, 0x00, 0x00, 0x30, 0xcc, 0xcc,
   0x33, 0x20, 0xc0, 0x40, 0xfe, 0x01, 0xf8, 0xe1, 0x33, 0xe2, 0x01, 0x00,
   0x00, 0x18, 0xd8, 0xcc, 0x37, 0x27, 0xc0, 0x43, 0xfe, 0x01, 0xfe, 0xf1,
   0x33, 0xf2, 0x03, 0x00, 0x00, 0x18, 0xd0, 0xcc, 0x37, 0x2f, 0x40, 0x47,
   0xb2, 0x01, 0x2e, 0x7b, 0x13, 0xf6, 0x02, 0x00, 0x00, 0x18, 0xd8, 0xcc,
   0xb7, 0x3f, 0x40, 0x4e, 0x2a, 0x01, 0x27, 0x3a, 0x13, 0xf4, 0x02, 0x00,
   0x00, 0x08, 0xdc, 0xcc, 0xb7, 0x3f, 0x40, 0x4c, 0x3a, 0x01, 0xa7, 0x1b,
   0x1b, 0xe4, 0x02, 0x00, 0x00, 0x08, 0xde, 0x0c, 0xb0, 0x37, 0x40, 0x4c,
   0x1e, 0x01, 0xa7, 0x3b, 0x1b, 0x4c, 0x06, 0x00, 0x00, 0x08, 0xfe, 0x0c,
   0xb0, 0x37, 0x40, 0x4c, 0x1e, 0x01, 0xee, 0x73, 0x1b, 0x08, 0x06, 0x00,
   0x00, 0x08, 0xfe, 0x0c, 0x30, 0x23, 0x40, 0x46, 0x1c, 0x01, 0xb8, 0xc1,
   0x1b, 0x18, 0x03, 0x00, 0x00, 0x48, 0xec, 0x0c, 0x30, 0x20, 0x40, 0x46,
   0x00, 0x01, 0x30, 0x80, 0x93, 0xf8, 0x03, 0x00, 0x00, 0xd8, 0xc0, 0x0c,
   0x30, 0x20, 0xc0, 0x43, 0x00, 0x01, 0x30, 0xe0, 0xd3, 0xf1, 0x03, 0x00,
   0x00, 0xd0, 0xc0, 0x0c, 0x30, 0x20, 0xc0, 0x43, 0x00, 0x01, 0x20, 0x70,
   0xf3, 0xe1, 0x01, 0x00, 0x00, 0xf0, 0x80, 0x0c, 0x30, 0x20, 0x80, 0x41,
   0x00, 0x01, 0x20, 0x60, 0xe3, 0x01, 0x00, 0x00, 0x00, 0xe0, 0x80, 0x0c,
   0x30, 0x00, 0x00, 0x40, 0xe0, 0x01, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x80, 0x00, 0x20, 0x00, 0x00, 0x40, 0xe0, 0x01, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xb0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00,
   0x00, 0x02, 0x08, 0x00, 0xf0, 0xff, 0xff, 0x7f, 0xff, 0x07, 0xe0, 0x7f,
   0xff, 0xbf, 0xff, 0x83, 0xff, 0x06, 0xf8, 0x3f, 0xf8, 0xff, 0xff, 0xff,
   0xff, 0x0f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xcf, 0xf9, 0x7f,
   0xfc, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x07,
   0xff, 0xff, 0xfb, 0x7f, 0xce, 0x19, 0x03, 0x8e, 0x01, 0x02, 0x1c, 0x98,
   0x09, 0xc3, 0x1e, 0x01, 0x02, 0x73, 0x0e, 0x10, 0x06, 0x9b, 0x81, 0x1f,
   0x01, 0x02, 0x0c, 0x1c, 0x89, 0x87, 0x1c, 0x01, 0x06, 0x32, 0x0e, 0x10,
   0x06, 0x9b, 0xc1, 0x1f, 0x31, 0x02, 0x06, 0x1f, 0xc9, 0x8f, 0x30, 0x01,
   0x0e, 0x72, 0x8f, 0x13, 0x83, 0x9b, 0xe0, 0x32, 0x79, 0x02, 0x86, 0x1f,
   0xc9, 0x8b, 0x20, 0x01, 0x3e, 0xd2, 0xcb, 0x13, 0x83, 0x99, 0x70, 0x32,
   0xf9, 0x02, 0xc6, 0x13, 0xd1, 0x8b, 0x20, 0x01, 0x7a, 0xc2, 0xc9, 0x17,
   0xc3, 0x99, 0x30, 0x22, 0xb9, 0x03, 0xc2, 0x11, 0xd1, 0x8b, 0x38, 0x01,
   0x72, 0xc2, 0xc8, 0x1d, 0xc3, 0xd9, 0x70, 0x3a, 0xb9, 0x03, 0x82, 0x13,
   0x91, 0x89, 0x3c, 0x01, 0x62, 0xe2, 0xc8, 0x19, 0xc3, 0xdb, 0xe0, 0x3e,
   0x39, 0x03, 0x82, 0x17, 0x31, 0x88, 0x7c, 0x01, 0x62, 0x42, 0xc8, 0x19,
   0x83, 0x9b, 0xc0, 0x3b, 0x39, 0x03, 0x02, 0x16, 0x61, 0x8c, 0xfc, 0x01,
   0x32, 0x02, 0x88, 0x19, 0x03, 0x9e, 0x00, 0x13, 0x01, 0x02, 0x02, 0x1c,
   0xe1, 0x8f, 0xf8, 0x01, 0x32, 0x02, 0x08, 0x10, 0x1a, 0x9c, 0x06, 0x03,
   0x01, 0x02, 0x36, 0x18, 0xc1, 0x8f, 0x80, 0x01, 0x1a, 0x02, 0x08, 0x10,
   0x3a, 0x98, 0x0e, 0x02, 0x01, 0x02, 0x34, 0x18, 0xc1, 0x87, 0x00, 0x01,
   0x1e, 0x02, 0x08, 0x10, 0x1e, 0x98, 0x0f, 0x02, 0x01, 0x02, 0x3c, 0x10,
   0x01, 0x83, 0x00, 0x01, 0x0e, 0x02, 0x08, 0x10, 0x1c, 0x10, 0x07, 0x02,
   0x01, 0x02, 0x3c, 0x10, 0x01, 0x80, 0x00, 0x01, 0x04, 0x02, 0x0e, 0x10,
   0x08, 0x10, 0x06, 0x00, 0x01, 0x02, 0x18, 0x00, 0x01, 0x80, 0x00, 0x01,
   0x00, 0x02, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };

int NumerialHeight = 32;
int NumerialWidth = 32;

const unsigned char *numerials_16[10] = {
    Zero_16,
    One_16,
    Two_16,
    Three_16,
    Four_16,
    Five_16,
    Six_16,
    Seven_16,
    Eight_16,
    Nine_16};

const unsigned char *numerials_32[10] = {
    Zero_32,
    One_32,
    Two_32,
    Three_32,
    Four_32,
    Five_32,
    Six_32,
    Seven_32,
    Eight_32,
    Nine_32};

#define takkaSymbol_16_width 16
#define takkaSymbol_16_height 32
static unsigned char takkaSymbol_16[] = {
   0x1c, 0x00, 0x20, 0x00, 0x2c, 0x00, 0x50, 0x00, 0x54, 0x00, 0x20, 0x00,
   0x60, 0x00, 0x10, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x3c,
   0xff, 0x60, 0x00, 0x1d, 0x7e, 0xf1, 0x80, 0x8e, 0x30, 0xb8, 0x40, 0x44,
   0x50, 0xdc, 0x20, 0x30, 0x60, 0xe0, 0x10, 0x10, 0x70, 0x70, 0x00, 0x08,
   0x70, 0x78, 0x00, 0x24, 0xf0, 0x2c, 0x00, 0x13, 0x60, 0x16, 0x80, 0x0d,
   0x80, 0x01, 0x00, 0x00 };

#define takkaSymbol_32_width 32
#define takkaSymbol_32_height 32
static unsigned char takkaSymbol_32[] = {
   0x00, 0x00, 0x00, 0x00, 0xe0, 0x09, 0x00, 0x00, 0x08, 0x13, 0x00, 0x00,
   0x00, 0x08, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00,
   0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
   0x00, 0x30, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
   0x80, 0x8c, 0xf0, 0x0f, 0x7c, 0x70, 0x00, 0x30, 0x80, 0x81, 0x00, 0x20,
   0x50, 0x46, 0xfb, 0x47, 0x00, 0x1c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xd0,
   0x00, 0x11, 0xf0, 0x11, 0x00, 0x2e, 0x00, 0x86, 0x00, 0x00, 0x00, 0x34,
   0x00, 0x28, 0x00, 0x08, 0x00, 0x0b, 0x80, 0x21, 0x00, 0x20, 0x00, 0x1a,
   0x00, 0x0a, 0x00, 0x02, 0x00, 0x25, 0xc0, 0x10, 0x00, 0x08, 0x90, 0x06,
   0x00, 0xe5, 0x0c, 0x01, 0x00, 0x88, 0x31, 0x00, 0x00, 0x04, 0x48, 0x00,
   0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 };


#define ML_width 64
#define ML_height 32
static unsigned char ML[] = {
   0x00, 0x0f, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00,
   0xe0, 0x1f, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x00, 0xf0, 0x7f, 0x00, 0x00,
   0xf0, 0xc1, 0x03, 0x00, 0xf8, 0xe0, 0x00, 0x00, 0xf0, 0x00, 0x07, 0x00,
   0x3c, 0x80, 0x01, 0x00, 0x78, 0x00, 0x0e, 0x00, 0x3c, 0x00, 0x03, 0x00,
   0x38, 0x00, 0x08, 0x00, 0x1c, 0x00, 0x06, 0x00, 0x38, 0x00, 0x10, 0x00,
   0x0c, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
   0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x01, 0xfe, 0xff, 0xff, 0x03,
   0xff, 0xff, 0xff, 0x03, 0xfc, 0xff, 0xff, 0x07, 0xfe, 0xff, 0xff, 0x07,
   0x60, 0x7e, 0x70, 0x00, 0x38, 0x00, 0x70, 0x00, 0x60, 0xfc, 0x70, 0x00,
   0x38, 0x3c, 0x77, 0x00, 0x60, 0xe0, 0x71, 0x00, 0x38, 0xfe, 0x7f, 0x00,
   0x60, 0xc0, 0x71, 0x00, 0x38, 0xff, 0x7f, 0x00, 0x60, 0x80, 0x71, 0x00,
   0x38, 0xcf, 0x7b, 0x00, 0x60, 0x80, 0x73, 0x00, 0x38, 0x87, 0x73, 0x00,
   0x60, 0xe0, 0x73, 0x00, 0x38, 0x73, 0x73, 0x00, 0x60, 0xf8, 0x73, 0x00,
   0x38, 0xfb, 0x70, 0x00, 0x60, 0xf8, 0x73, 0x00, 0x38, 0xff, 0x70, 0x00,
   0x60, 0xf8, 0x77, 0x00, 0x38, 0xfe, 0x70, 0x00, 0x60, 0xf8, 0x7f, 0x00,
   0x38, 0xfe, 0x70, 0x00, 0x60, 0xf8, 0x7f, 0x00, 0x38, 0x78, 0x70, 0x00,
   0x60, 0xf0, 0x7c, 0x00, 0x38, 0x00, 0x70, 0x00, 0x60, 0x00, 0x78, 0x00,
   0x38, 0x00, 0x70, 0x00, 0x60, 0x00, 0x70, 0x30, 0x38, 0x00, 0x70, 0x30,
   0x60, 0x00, 0x60, 0x78, 0x38, 0x00, 0x70, 0x78, 0x60, 0x00, 0x60, 0x78,
   0x38, 0x00, 0x70, 0xf8, 0x60, 0x00, 0x60, 0x78, 0x30, 0x00, 0x60, 0x78,
   0x40, 0x00, 0x40, 0x78, 0x20, 0x00, 0x40, 0x70, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00 };

#define YouSaved_width 128
#define YouSaved_height 32
static unsigned char YouSaved[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01,
   0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x40, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xff, 0xdf, 0x01, 0xfe, 0xef, 0xff, 0xf0, 0x7f,
   0x8f, 0xfc, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0x7b, 0xfe,
   0xff, 0xff, 0xf0, 0xff, 0xdf, 0xfd, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0x7f,
   0xfe, 0xff, 0x7b, 0xfe, 0xff, 0xff, 0xf1, 0xff, 0xdf, 0xfd, 0x3f, 0xfe,
   0xff, 0xff, 0xff, 0xff, 0xc0, 0xec, 0xfc, 0x02, 0x36, 0x20, 0xe0, 0x91,
   0xf1, 0xf5, 0x04, 0x20, 0xf0, 0x47, 0xbc, 0x00, 0xe4, 0xcc, 0xcc, 0x03,
   0x22, 0x30, 0xc0, 0x91, 0xf1, 0xe7, 0x04, 0x70, 0x30, 0x4e, 0x9c, 0x01,
   0xe4, 0xcd, 0xce, 0x03, 0x22, 0x38, 0x00, 0x11, 0x71, 0x86, 0x05, 0xf0,
   0x30, 0x48, 0x8c, 0x0f, 0xe4, 0xcd, 0xde, 0x03, 0x22, 0x3c, 0x00, 0x17,
   0xf9, 0x86, 0x05, 0xf8, 0x19, 0x58, 0x84, 0x1f, 0xe4, 0xcf, 0xfe, 0x73,
   0x22, 0x3e, 0x00, 0x1f, 0xf9, 0xc6, 0x05, 0xb8, 0x19, 0x5c, 0x86, 0x1e,
   0x64, 0xcf, 0x70, 0xf3, 0x22, 0x2f, 0x00, 0x1f, 0xf9, 0xc5, 0x05, 0x38,
   0x19, 0x4e, 0x86, 0x3c, 0x0c, 0xcf, 0x70, 0xf3, 0x22, 0x27, 0x00, 0x1f,
   0xf9, 0xe5, 0x04, 0x38, 0x09, 0x4e, 0x86, 0x2c, 0x08, 0xcf, 0x30, 0xfa,
   0x23, 0x23, 0x20, 0x1b, 0xf9, 0xe5, 0x04, 0x10, 0x09, 0x47, 0x82, 0x26,
   0x08, 0xcf, 0x38, 0x7a, 0x23, 0x27, 0xa0, 0x13, 0xd9, 0x64, 0x04, 0x84,
   0x09, 0x47, 0x82, 0x37, 0x18, 0xcf, 0x18, 0x7a, 0x23, 0x27, 0xe0, 0x11,
   0x15, 0xe4, 0x04, 0xcc, 0x09, 0x46, 0x82, 0x33, 0xb0, 0xcf, 0x10, 0x72,
   0x22, 0x2e, 0xc0, 0x11, 0x05, 0xe4, 0x05, 0xfc, 0x09, 0x4e, 0x02, 0x39,
   0xf0, 0xcf, 0x00, 0x73, 0x22, 0x2c, 0xc0, 0x11, 0x05, 0xc4, 0x05, 0xf8,
   0x08, 0x5e, 0x02, 0x18, 0xf0, 0xcf, 0x00, 0x03, 0x22, 0x38, 0xc0, 0x10,
   0x05, 0x04, 0x07, 0x78, 0x08, 0x78, 0x82, 0x1f, 0xe0, 0xcd, 0x00, 0x03,
   0x22, 0x30, 0x00, 0x10, 0x05, 0x04, 0x07, 0x78, 0x48, 0x70, 0xb2, 0x0f,
   0xc0, 0xcc, 0x00, 0x03, 0x22, 0x34, 0x00, 0x10, 0x0d, 0x84, 0x06, 0xf0,
   0xe8, 0x6c, 0x36, 0x0f, 0x00, 0xcc, 0x00, 0x03, 0x22, 0x2e, 0x00, 0x10,
   0xfd, 0xc4, 0x06, 0xe0, 0xf8, 0x6c, 0x34, 0x0f, 0x00, 0xc8, 0x00, 0x03,
   0x20, 0x2e, 0x00, 0x10, 0xf9, 0xc7, 0x05, 0xc0, 0xf1, 0x6c, 0x3c, 0x1e,
   0x00, 0xc8, 0x00, 0x03, 0x20, 0x24, 0x00, 0x10, 0xf9, 0xc7, 0x04, 0x80,
   0xf1, 0x4c, 0x3c, 0x18, 0x00, 0xc8, 0x00, 0x02, 0x20, 0x20, 0x00, 0x10,
   0x01, 0x86, 0x04, 0x00, 0x63, 0x4c, 0x38, 0x30, 0x00, 0x88, 0x00, 0x02,
   0x20, 0x00, 0x00, 0x10, 0x01, 0x06, 0x00, 0x00, 0x42, 0x40, 0x10, 0x20,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
   0x06, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


U8G2_ST7920_128X64_F_SW_SPI display1(U8G2_R0, /* clock=*/15 /* A4 */, /* data=*/16 /* A2 */, /* CS=*/17 /* A3 */, /* reset=*/U8X8_PIN_NONE);
U8G2_ST7920_128X64_F_SW_SPI display2(U8G2_R0, /* clock=*/13 /* A4 */, /* data=*/16 /* A2 */, /* CS=*/17 /* A3 */, /* reset=*/U8X8_PIN_NONE);
U8G2_ST7920_128X64_F_SW_SPI display3(U8G2_R0, /* clock=*/14 /* A4 */, /* data=*/16 /* A2 */, /* CS=*/17 /* A3 */, /* reset=*/U8X8_PIN_NONE);
U8G2_ST7920_128X64_F_SW_SPI display4(U8G2_R0, /* clock=*/ 18 /* A4 */ , /* data=*/ 16 /* A2 */, /* CS=*/ 17 /* A3 */, /* reset=*/ U8X8_PIN_NONE);
// U8G2_ST7920_128X64_F_SW_SPI display4(U8G2_R0, /* clock=*/ 16 /* A4 */ , /* data=*/ 17 /* A2 */, /* CS=*/ 33 /* A3 */, /* reset=*/ U8X8_PIN_NONE);

// U8G2_ST7920_128X64_F_SW_SPI activeDisplay(U8G2_R0, /* clock=*/16 /* A4 */, /* data=*/17 /* A2 */, /* CS=*/15 /* A3 */, /* reset=*/U8X8_PIN_NONE);

uint8_t draw_state = 0;
int activeDispenser = 0;

void onRequest() // Anwsers to Master's "requestFrom"
{
   // SerialMon.println("Request received. Sending buffered data."); //The sending happens on the background
}

void onReceive(int len) // Anwsers to Master's "transmissions"
{
   // The way msg have been contstructed is DispenserIndex:MSG:QTY
   String requestResponse = ""; // to generate the request reply content
   String masterMessage = "";   // to save Master's message

   char msg[len];
   int msgIndex = 0;
   while (Wire.available()) // If there are bytes through I2C
   {
      masterMessage.concat((char)Wire.read()); // make a string out of the bytes
   }

   masterMessage.toCharArray(msg, len+1);
   
   Serial.print("Master Message: ");
   Serial.println(masterMessage);

   Serial.print("First char of Master Message: ");
   Serial.println(msg[0]);
   
   if (masterMessage == "1")
   {
      Serial.println("Init");
      activeDispenser = 1;
      display1.begin();
      display1.clearBuffer();
      display1.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
      // display1.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[0]);
      display1.drawXBMP(0,32,ML_width, ML_height, ML);
      // display1.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[0]);
      display1.sendBuffer();
   }
   else if (masterMessage == "2")
   {
      activeDispenser = 2;
      display2.begin();
      display2.clearBuffer();
      display2.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
      // display2.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[0]);
      display2.drawXBMP(0,32,ML_width, ML_height, ML);
      // display2.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[0]);
      display2.sendBuffer();
   }
   else if (masterMessage == "3")
   {
      activeDispenser = 3;
      display3.clearBuffer();
      display3.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
      // display3.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[0]);
      display3.drawXBMP(0,32,ML_width, ML_height, ML);
      // display3.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[0]);
      display3.sendBuffer();
   }
   else if (masterMessage == "4")
   {
      activeDispenser = 4;
      display4.clearBuffer();
      display4.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
      // display4.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[0]);
      display4.drawXBMP(0,32,ML_width, ML_height, ML);
      // display4.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[0]);
      display4.sendBuffer();
   }
   else if (msg[0] == 'S')
   {
      // S:XX
      char firstNum[2];
      char secondNum[2];
      firstNum[0] = msg[2];
      firstNum[1] = '\0';
      String fNumString = firstNum;
      int FNum = fNumString.toInt();
      bool twoDig;
      Serial.println(msg[3]);
      int SNum = -1;
      if (isDigit(msg[3]))
      {
         twoDig = true; 
         secondNum[0] = msg[3];
         secondNum[1] = '\0';
         String SNumString = secondNum;
         SNum = SNumString.toInt();
      }

      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.drawXBMP(0, 0, YouSaved_width, YouSaved_height, YouSaved);
         
         if (SNum != -1)
         {
            display1.drawXBMP(0, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            display1.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            // display1.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }

                  
         else if (SNum == -1)
         {
            display1.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            // display1.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            // display1.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }
         
         display1.sendBuffer();

         delay(10000);
         display1.clearBuffer();
         display1.sendBuffer();
         delay(1000);
         display1.clearBuffer();
         display1.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display1.sendBuffer();
         
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         display2.drawXBMP(0, 0, YouSaved_width, YouSaved_height, YouSaved);
         
         if (SNum != -1)
         {
            display2.drawXBMP(0, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            display2.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            display2.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }

                  
         else if (SNum == -1)
         {
            display2.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            // display1.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            display2.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }
         
         display2.sendBuffer();
         display2.clearBuffer();
         display2.sendBuffer();
         delay(1000);
         display2.clearBuffer();
         display2.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         display3.drawXBMP(0, 0, YouSaved_width, YouSaved_height, YouSaved);
         
         if (SNum != -1)
         {
            display3.drawXBMP(0, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            display3.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            display3.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }

                  
         else if (SNum == -1)
         {
            display3.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            // display1.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            display3.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }
         
         display3.sendBuffer();
         display3.clearBuffer();
         display3.sendBuffer();
         delay(1000);
         display3.clearBuffer();
         display3.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display3.sendBuffer();
      }
      break;
      case 4:
      {
         display4.clearBuffer();
         display4.drawXBMP(0, 0, YouSaved_width, YouSaved_height, YouSaved);
         
         if (SNum != -1)
         {
            display4.drawXBMP(0, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            display4.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            display4.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }

                  
         else if (SNum == -1)
         {
            display4.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[FNum]);
            // display1.drawXBMP(NumerialWidth, YouSaved_height, NumerialWidth, NumerialHeight, numerials_32[SNum]);
            display4.drawXBMP(NumerialWidth+NumerialWidth, YouSaved_height, Takka_width, Takka_height, Takka_bits);
         }
         
         display4.sendBuffer();
         display4.clearBuffer();
         display4.sendBuffer();
         delay(1000);
         display4.clearBuffer();
         display4.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display4.sendBuffer();
      }
      break;
      }
      
      
      
   }
   else if (msg[0] == 'N')
   {
      // 0 1 2 3 4 5 6 7 8
      // N : X X : X X X :
      Serial.println("Number change");
      Serial.print(msg);
      //Serial.print(msg[5]);
         
      bool twoDig = false;
      
      char firstNum[2];
      char secondNum[2];
      
      char firstVolNum[2];
      char secondVolNum[2];
      char thirdVolNum[2];
      
      int FVN=-1;
      int SVN=-1;
      int TVN=-1;
      int SNum = -1;
      
      firstNum[0] = msg[2];
      firstNum[1] = '\0';
      
      String fNumString = firstNum;
      int FNum = fNumString.toInt();
      
      Serial.println(msg[3]);
      
      if (isDigit(msg[3]))
      {
         twoDig = true; 
         secondNum[0] = msg[3];
         secondNum[1] = '\0';
         String SNumString = secondNum;
         SNum = SNumString.toInt();
      }
      if (twoDig) 
      {
        firstVolNum[0]=msg[5];
        firstVolNum[1]='\0';
        
        String FVNumString = firstVolNum;
        FVN = FVNumString.toInt();
        
        if (isDigit(msg[6]))
        {
          secondVolNum[0]=msg[6];
          secondVolNum[1]='\0';
          String SVNumString = secondVolNum;
          SVN = SVNumString.toInt();
        }
        
        if (isDigit(msg[7]))
        {
          thirdVolNum[0] = msg[7];
          thirdVolNum[1]='\0';
          String TVNumString = thirdVolNum;
          TVN = TVNumString.toInt();
        }
      }
      if(!twoDig){
         firstVolNum[0]=msg[4];
         firstVolNum[1]='\0';
         // secondVolNum[0]=msg[5];
         String FVNumString = firstVolNum;
         FVN = FVNumString.toInt();
         if (isDigit(msg[5])){
         secondVolNum[0]=msg[5];
         secondVolNum[1]='\0';

         String SVNumString = secondVolNum;
         SVN = SVNumString.toInt();
         }

      }

      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
         if (FNum>0){
         display1.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[FNum]);
         }
         if (SNum != -1)
         {
            Serial.println("SecondNumber");
            Serial.println(SNum);
            display1.drawXBMP(TakkaColonWidth + NumerialWidth, 0, NumerialWidth, NumerialHeight, numerials_32[SNum]);
         }
         if (TVN == -1){
         display1.drawXBMP(0,32,ML_width, ML_height, ML);
         display1.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[FVN]);
         if(SVN!=-1){
         display1.drawXBMP(ML_width+NumerialWidth,32,NumerialWidth, NumerialHeight, numerials_32[SVN]);
         }
         }
         if (TVN !=-1){
         display1.drawXBMP(0,32,ML_width, ML_height, ML);
         display1.drawXBMP(ML_width,32,16, NumerialHeight, numerials_16[FVN]);
         display1.drawXBMP(ML_width+16,32,16, NumerialHeight, numerials_16[SVN]);
         display1.drawXBMP(ML_width+16+16,32,16, NumerialHeight, numerials_16[TVN]); // change
         }
         display1.sendBuffer();
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         // display2.clearBuffer();
         display2.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
         if (FNum>0){
         display2.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[FNum]);
         }
         if (SNum != -1)
         {
            Serial.println("SecondNumber");
            Serial.println(SNum);
            display2.drawXBMP(TakkaColonWidth + NumerialWidth, 0, NumerialWidth, NumerialHeight, numerials_32[SNum]);
         }
         if (TVN == -1){
         display2.drawXBMP(0,32,ML_width, ML_height, ML);
         
         display2.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[FVN]);
         if(SVN!=-1){
         display2.drawXBMP(ML_width+NumerialWidth,32,NumerialWidth, NumerialHeight, numerials_32[SVN]);
         }
         }
         if (TVN !=-1){
         display2.drawXBMP(0,32,ML_width, ML_height, ML);
         display2.drawXBMP(ML_width,32,16, NumerialHeight, numerials_16[FVN]);
         display2.drawXBMP(ML_width+16,32,16, NumerialHeight, numerials_16[SVN]);
         display2.drawXBMP(ML_width+16+16,32,16, NumerialHeight, numerials_16[TVN]); // change

         }
         display2.sendBuffer();
         // display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         // display3.clearBuffer();
         display3.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
         if (FNum>0){
         display3.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[FNum]);
         }
         if (SNum != -1)
         {
            Serial.println("SecondNumber");
            Serial.println(SNum);
            display3.drawXBMP(TakkaColonWidth + NumerialWidth, 0, NumerialWidth, NumerialHeight, numerials_32[SNum]);
         }
         if (TVN == -1){
         display3.drawXBMP(0,32,ML_width, ML_height, ML);
         display3.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[FVN]);
         if(SVN!=-1){
         display3.drawXBMP(ML_width+NumerialWidth,32,NumerialWidth, NumerialHeight, numerials_32[SVN]);
         }
         }
         if (TVN !=-1){
         display3.drawXBMP(0,32,ML_width, ML_height, ML);
         display3.drawXBMP(ML_width,32,16, NumerialHeight, numerials_16[FVN]);
         display3.drawXBMP(ML_width+16,32,16, NumerialHeight, numerials_16[SVN]);
         display3.drawXBMP(ML_width+16+16,32,16, NumerialHeight, numerials_16[TVN]); // change

         }
         // display3.sendBuffer();
         display3.sendBuffer();
      }
      break;
      case 4:
      {
         display4.clearBuffer();
         // display4.clearBuffer();
         display4.drawXBMP(0, 0, TakkaColonWidth, TakkaColonHeight, takkaColon);
         if (FNum>0){
         display4.drawXBMP(TakkaColonWidth, 0, NumerialWidth, NumerialHeight, numerials_32[FNum]);
         }
         if (SNum != -1)
         {
            Serial.println("SecondNumber");
            Serial.println(SNum);
            display4.drawXBMP(TakkaColonWidth + NumerialWidth, 0, NumerialWidth, NumerialHeight, numerials_32[SNum]);
         }
         if (TVN == -1){
         display4.drawXBMP(0,32,ML_width, ML_height, ML);
         display4.drawXBMP(ML_width,32,NumerialWidth, NumerialHeight, numerials_32[FVN]);
         if(SVN!=-1){
         display4.drawXBMP(ML_width+NumerialWidth,32,NumerialWidth, NumerialHeight, numerials_32[SVN]);
         }
         }
         if (TVN !=-1){
         display4.drawXBMP(0,32,ML_width, ML_height, ML);
         display4.drawXBMP(ML_width,32,16, NumerialHeight, numerials_16[FVN]);
         display4.drawXBMP(ML_width+16,32,16, NumerialHeight, numerials_16[SVN]);
         display4.drawXBMP(ML_width+16+16,32,16, NumerialHeight, numerials_16[TVN]); // change

         }
         // display4.sendBuffer();
         display4.sendBuffer();
      }
      break;
      }
   }
   // D:xx:xx:
   else if (msg[0] == 'D')
   {
      Serial.println("Number change");
      char firstNum[2];
      char secondNum[2];
      char thirdNum[2];
      char fourNum[2];
      int FNum = -1;
      int SNum = -1;
      int TNum = -1;
      int FourthNum = -1;

      firstNum[0] = msg[2];
      firstNum[1] = '\0';
      String fNumString = firstNum;
      FNum = fNumString.toInt();

      secondNum[0] = msg[3];
      secondNum[1] = '\0';
      String SNumString = secondNum;
      SNum = SNumString.toInt();

      thirdNum[0] = msg[5];
      thirdNum[1] = '\0';
      String TNumString = thirdNum;
      TNum = TNumString.toInt();

      fourNum[0] = msg[6];
      fourNum[1] = '\0';
      String FourNumString = fourNum;
      FourthNum = FourNumString.toInt();

      //  activeDisplay.clearBuffer();

      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.drawXBMP(16, 0, 96, 32, Dispensing);
         if (FNum != -1 & FNum != 0)
         {
            display1.drawXBMP(0, 32, 16, 32, numerials_16[FNum]);
         }
         if (SNum != -1)
         {
            display1.drawXBMP(16, 32, 16, 32, numerials_16[SNum]);
         }

         display1.drawXBMP(32, 32, 16, 32, div_bits);

         if (TNum == 0)
         {
            display1.drawXBMP(48, 32, 16, 32, numerials_16[FourthNum]);
         }

         if (TNum != 0)
         {
            display1.drawXBMP(48, 32, 16, 32, numerials_16[TNum]);
            display1.drawXBMP(48 + 16, 32, 16, 32, numerials_16[FourthNum]);
         }
         display1.drawXBMP(48 + 32, 32, 48, 32, Takka_bits);

         display1.sendBuffer();
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         display2.drawXBMP(16, 0, 96, 32, Dispensing);
         if (FNum != -1 & FNum != 0)
         {
            display2.drawXBMP(0, 32, 16, 32, numerials_16[FNum]);
         }
         if (SNum != -1)
         {
            display2.drawXBMP(16, 32, 16, 32, numerials_16[SNum]);
         }

         display2.drawXBMP(32, 32, 16, 32, div_bits);

         if (TNum == 0)
         {
            display2.drawXBMP(48, 32, 16, 32, numerials_16[FourthNum]);
         }

         if (TNum != 0)
         {
            display2.drawXBMP(48, 32, 16, 32, numerials_16[TNum]);
            display2.drawXBMP(48 + 16, 32, 16, 32, numerials_16[FourthNum]);
         }
         display2.drawXBMP(48 + 32, 32, 48, 32, Takka_bits);
         display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         display3.drawXBMP(16, 0, 96, 32, Dispensing);
         if (FNum != -1 & FNum != 0)
         {
            display3.drawXBMP(0, 32, 16, 32, numerials_16[FNum]);
         }
         if (SNum != -1)
         {
            display3.drawXBMP(16, 32, 16, 32, numerials_16[SNum]);
         }

         display3.drawXBMP(32, 32, 16, 32, div_bits);

         if (TNum == 0)
         {
            display3.drawXBMP(48, 32, 16, 32, numerials_16[FourthNum]);
         }

         if (TNum != 0)
         {
            display3.drawXBMP(48, 32, 16, 32, numerials_16[TNum]);
            display3.drawXBMP(48 + 16, 32, 16, 32, numerials_16[FourthNum]);
         }
         display3.drawXBMP(48 + 32, 32, 48, 32, Takka_bits);
         display3.sendBuffer();
      }
      break;
      case 4:
      {
        display4.clearBuffer();
         display4.drawXBMP(16, 0, 96, 32, Dispensing);
         if (FNum != -1 & FNum != 0)
         {
            display4.drawXBMP(0, 32, 16, 32, numerials_16[FNum]);
         }
         if (SNum != -1)
         {
            display4.drawXBMP(16, 32, 16, 32, numerials_16[SNum]);
         }

         display4.drawXBMP(32, 32, 16, 32, div_bits);

         if (TNum == 0)
         {
            display4.drawXBMP(48, 32, 16, 32, numerials_16[FourthNum]);
         }

         if (TNum != 0)
         {
            display4.drawXBMP(48, 32, 16, 32, numerials_16[TNum]);
            display4.drawXBMP(48 + 16, 32, 16, 32, numerials_16[FourthNum]);
         }
         display4.drawXBMP(48 + 32, 32, 48, 32, Takka_bits);
         display4.sendBuffer();
      }
      break;
      }
   }

   else if (masterMessage == "Press Green")
   {
      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.drawXBMP(0, 0, PressGreen_width, PressGreen_height, PressGreen);
         display1.sendBuffer();
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         display2.drawXBMP(0, 0, PressGreen_width, PressGreen_height, PressGreen);
         display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         display3.drawXBMP(0, 0, PressGreen_width, PressGreen_height, PressGreen);
         display3.sendBuffer();
      }
      break;
      case 4:
      {
         display4.clearBuffer();
         display4.drawXBMP(0, 0, PressGreen_width, PressGreen_height, PressGreen);
         display4.sendBuffer();
      }
      break;
      }
   }

   else if (masterMessage == "Push Bottle")
   {
      //  activeDisplay.clearBuffer();
      //  activeDisplay.drawXBMP(0,0,PushBottle_width, PushBottle_height, PushBottle);
      //  activeDisplay.sendBuffer();

      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushBottle);
         display1.sendBuffer();
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         display2.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushBottle);
         display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         display3.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushBottle);
         display3.sendBuffer();
      }
      break;
      case 4:
      {
         display4.clearBuffer();
         display4.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushBottle);
         display4.sendBuffer();
      }
      break;
      }
   }

   else if (masterMessage == "Cancel")
   {
      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.drawXBMP(0, 0, RedCancel_width, RedCancel_height, RedCancel);
         display1.sendBuffer();
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         display2.drawXBMP(0, 0, RedCancel_width, RedCancel_height, RedCancel);
         display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         display3.drawXBMP(0, 0, RedCancel_width, RedCancel_height, RedCancel);
         display3.sendBuffer();
      }
      break;
      case 4:
      {
         display4.clearBuffer();
         display4.drawXBMP(0, 0, RedCancel_width, RedCancel_height, RedCancel);
         display4.sendBuffer();
      }
      break;
      }
   }

   else if (masterMessage == "Printing")
   {
      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.drawXBMP(0, 0, 128, 64, Printing);
         display1.sendBuffer();
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         display2.drawXBMP(0, 0, 128, 64, Printing);
         display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         display3.drawXBMP(0, 0, 128, 64, Printing);
         display3.sendBuffer();
      }
      break;
      case 4:
      {
         display4.clearBuffer();
         display4.drawXBMP(0, 0, 128, 64, Printing);
         display4.sendBuffer();
      }
      break;
      }
   }

   else if (masterMessage == "Finished")
   {
      switch (activeDispenser)
      {
      case 1:
      {
         display1.clearBuffer();
         display1.sendBuffer();
         delay(1000);
         display1.clearBuffer();
         display1.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display1.sendBuffer();
      }
      break;
      case 2:
      {
         display2.clearBuffer();
         display2.sendBuffer();
         delay(1000);
         display2.clearBuffer();
         display2.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display2.sendBuffer();
      }
      break;
      case 3:
      {
         display3.clearBuffer();
         display3.sendBuffer();
         delay(1000);
         display3.clearBuffer();
         display3.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display3.sendBuffer();
      }
      break;
      case 4:
      {
         display4.clearBuffer();
         display4.sendBuffer();
         delay(1000);
         display4.clearBuffer();
         display4.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
         display4.sendBuffer();
      }
      break;
      }
   }
}

void resetDisplays()
{
   display1.clearBuffer();
   display1.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display1.sendBuffer();

   // display2.begin();
   display2.clearBuffer();
   display2.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display2.sendBuffer();

   // display3.begin();
   display3.clearBuffer();
   display3.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display3.sendBuffer();

   // display4.begin();
   display4.clearBuffer();
   display4.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display4.sendBuffer();
}

/* --- Arduino setup and loop Functions --- */
void setup(void)
{
   Serial.begin(115200);
   
   Wire.onReceive(onReceive);
   Wire.onRequest(onRequest);
   Wire.begin((uint8_t)I2C_DEV_ADDR); // Starting Wire as Slave

   display1.begin();
   display1.clearBuffer();
   display1.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display1.sendBuffer();

   display2.begin();
   display2.clearBuffer();
   display2.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display2.sendBuffer();

   display3.begin();
   display3.clearBuffer();
   display3.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display3.sendBuffer();

   display4.begin();
   display4.clearBuffer();
   display4.drawXBMP(0, 0, PushBottle_width, PushBottle_height, PushAnyBtn);
   display4.sendBuffer();
}

void loop(void)
{
}
