// Copyright (c) Microsoft Corporation. All rights reserved.
// SPDX-License-Identifier: MIT

/* --- CALIBRATION & CONFIG --- */

// WiFi Credentials
#define IOT_CONFIG_WIFI_SSID              "YOUR WIFI SSID HERE"
#define IOT_CONFIG_WIFI_PASSWORD          "YOUR WIFI PASSWORD HERE"

/* Azure Device Information 
 * 
 * MUST CHANGE THESE FOR EACH MACHINE
 * 
 * The device info for all 10 dispensers are listed
 * in the following format:
 * 
 * DEVICE ID - DEVICE KEY       (DEVICE NAME)
 * 
 * 00001 - zHq66LjZVWM0KJf+sGb0M+FH/ZwyuXc3YsVqLbEY5V8=       (Unilever Dispenser 1)
 * 00002 - A6CEJzIi644/QSAZD2MmSSaKuJXmkCh6aXaFL+7KWcs=       (Unilever Dispenser 2)
 * 00003 - L2X6aLCBOzyMKlilgolVdyNpEYL71oNNhOPMwk9i/l8=       (Unilever Dispenser 3)
 * 00004 - LgvLgJ4AQifPhbOvNgYVGmQ6qrSL6bPhE0qeI4AKD3w=       (Unilever Dispenser 4)
 * 00005 - m3F4c5TQyy3VYPP3l9zYDFZSttOmzyvn9ezXvSzCR0w=       (Unilever Dispenser 5)
 * 00006 - 1OCBiN35rjfKWjA16gClXbAroi2aoEWatDtETVDZCHE=       (Unilever Dispenser 6)
 * 00007 - dOVVHqWO9SzKnMz43wm+x2lpItfppYkynu2J3buALbY=       (Unilever Dispenser 7)
 * 00008 - 6BE2P/xqrw5t/0hI+BucSCXxz5wslCX0lKtQ3Om+TjQ=       (Unilever Dispenser 8)
 * 00009 - VIfj8G/e2P8JjQUEpPp2WQL+W8b8h3GfcnLvdSDq6Bw=       (Unilever Dispenser 9)
 * 00010 - clwh6eWTajMZpKbQpWOW+mzqK1ySYly2qSXyG/E1ayg=       (Unilever Dispenser 10)
 * 
 * 10000 - l1dg0rAhz4jf+g1M7LS07KGDyzYLJom1Eze72ICiRQ0=       (Luca's SA Test Dispenser)
 *
 * IOT_CONFIG_DEVICE_ID and IOT_CONFIG_DEVICE_KEY must
 * be defined to reflect the above informatiobn depending
 * on the machine in question.
 */
#define IOT_CONFIG_DEVICE_ID              "00001"
#define IOT_CONFIG_DEVICE_KEY             "zHq66LjZVWM0KJf+sGb0M+FH/ZwyuXc3YsVqLbEY5V8="

/* --- END OF CONFIG --- */

// Enable macro IOT_CONFIG_USE_X509_CERT to use an x509 certificate to authenticate the IoT device.
// The two main modes of authentication are through SAS tokens (automatically generated by the sample using the provided device symmetric key) or through x509 certificates.
// Please choose the appropriate option according to your device authentication mode.

// #define IOT_CONFIG_USE_X509_CERT

#ifdef IOT_CONFIG_USE_X509_CERT

/*
 * Please set the define IOT_CONFIG_DEVICE_CERT below with
 * the content of your device x509 certificate.
 * 
 * Example:
 * #define IOT_CONFIG_DEVICE_CERT "-----BEGIN CERTIFICATE-----\r\n" \
 * "MIIBJDCBywIUfeHrebBVa2eZAbouBgACp9R3BncwCgYIKoZIzj0EAwIwETEPMA0G\r\n" \
 * "A1UEAwwGRFBTIENBMB4XDTIyMDMyMjazMTAzN1oXDTIzMDMyMjIzMTAzN1owGTEX\r\n" \
 * "MBUGA1UEAwwOY29udG9zby1kZXZpY2UwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNC\r\n" \
 * .......
 * "YmGzdaHTb6P1W+p+jmc+jJn1MAoGCXqGSM49BAMCA0gAMEUCIEnbEMsAdGFroMwl\r\n" \
 * "vTfQahwsxN3xink9z1gtirrjQlqDAiEAyU+6TUJcG6d9JF+uJqsLFpsbbF3IzGAw\r\n" \
 * "yC+koNRC0MU=\r\n" \
 * "-----END CERTIFICATE-----" 
 *
 */
#define IOT_CONFIG_DEVICE_CERT "Device Certificate"

/*
 * Please set the define IOT_CONFIG_DEVICE_CERT_PRIVATE_KEY below with
 * the content of your device x509 private key.
 * 
 * Example:
 *
 * #define IOT_CONFIG_DEVICE_CERT_PRIVATE_KEY "-----BEGIN EC PRIVATE KEY-----\r\n" \
 * "MHcCAQEEIKGXkMMiO9D7jYpUjUGTBn7gGzeKPeNzCP83wbfQfLd9obAoGCCqGSM49\r\n" \
 * "AwEHoUQDQgAEU6nQoYbjgJvBwaeD6MyAYmOSDg0QhEdyyV337qrlIbDEKvFsn1El\r\n" \
 * "yRabc4dNp2Jhs3Xh02+j9Vvqfo5nPoyZ9Q==\r\n" \
 * "-----END EC PRIVATE KEY-----"
 * 
 * Note the type of key may different in your case. Such as BEGIN PRIVATE KEY
 * or BEGIN RSA PRIVATE KEY.
 * 
*/

#define IOT_CONFIG_DEVICE_CERT_PRIVATE_KEY "Device Certificate Private Key"

#endif // IOT_CONFIG_USE_X509_CERT

// Azure IoT Central
#define DPS_ID_SCOPE                      "0ne005E3008"

/* -------------------------------- */

// User-agent (url-encoded) provided by the MQTT client to Azure IoT Services.
// When developing for your own Arduino-based platform,
// please update the suffix with the format '(ard;<platform>)' as an url-encoded string.
#define AZURE_SDK_CLIENT_USER_AGENT       "c%2F" AZ_SDK_VERSION_STRING "(ard%3Besp32)"

// Publish 1 message every 3600 seconds (1 hour).
#define TELEMETRY_FREQUENCY_IN_SECONDS    3600

// For how long the MQTT password (SAS token) is valid, in minutes.
// After that, the sample automatically generates a new password and re-connects.
#define MQTT_PASSWORD_LIFETIME_IN_MINUTES 60
